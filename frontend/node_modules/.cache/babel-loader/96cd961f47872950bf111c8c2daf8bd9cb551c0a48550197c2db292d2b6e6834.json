{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abuza\\\\Desktop\\\\Fiver\\\\Admin Dashboard\\\\frontend\\\\src\\\\context\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(null);\n\n// Theme provider component\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // Check for saved theme preference or default to system preference\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    if (savedTheme) {\n      setIsDarkMode(savedTheme === 'dark');\n    } else {\n      setIsDarkMode(systemPrefersDark);\n    }\n  }, []);\n\n  // Apply theme to document\n  useEffect(() => {\n    const root = document.documentElement;\n    if (isDarkMode) {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n\n    // Save theme preference\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n  }, [isDarkMode]);\n\n  // Toggle theme\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n\n  // Set specific theme\n  const setTheme = theme => {\n    setIsDarkMode(theme === 'dark');\n  };\n\n  // Get current theme\n  const currentTheme = isDarkMode ? 'dark' : 'light';\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      // Only auto-switch if user hasn't manually set a preference\n      const savedTheme = localStorage.getItem('theme');\n      if (!savedTheme) {\n        setIsDarkMode(e.matches);\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n  const value = {\n    isDarkMode,\n    currentTheme,\n    toggleTheme,\n    setTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use theme context\n_s(ThemeProvider, \"ZabpATy7BGxY7Tz/IMMsMjxqg1I=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","systemPrefersDark","window","matchMedia","matches","root","document","documentElement","classList","add","remove","setItem","toggleTheme","prev","setTheme","theme","currentTheme","mediaQuery","handleChange","e","addEventListener","removeEventListener","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/abuza/Desktop/Fiver/Admin Dashboard/frontend/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Create context\r\nconst ThemeContext = createContext(null);\r\n\r\n// Theme provider component\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n  // Check for saved theme preference or default to system preference\r\n  useEffect(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    \r\n    if (savedTheme) {\r\n      setIsDarkMode(savedTheme === 'dark');\r\n    } else {\r\n      setIsDarkMode(systemPrefersDark);\r\n    }\r\n  }, []);\r\n\r\n  // Apply theme to document\r\n  useEffect(() => {\r\n    const root = document.documentElement;\r\n    \r\n    if (isDarkMode) {\r\n      root.classList.add('dark');\r\n    } else {\r\n      root.classList.remove('dark');\r\n    }\r\n    \r\n    // Save theme preference\r\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\r\n  }, [isDarkMode]);\r\n\r\n  // Toggle theme\r\n  const toggleTheme = () => {\r\n    setIsDarkMode(prev => !prev);\r\n  };\r\n\r\n  // Set specific theme\r\n  const setTheme = (theme) => {\r\n    setIsDarkMode(theme === 'dark');\r\n  };\r\n\r\n  // Get current theme\r\n  const currentTheme = isDarkMode ? 'dark' : 'light';\r\n\r\n  // Listen for system theme changes\r\n  useEffect(() => {\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n    \r\n    const handleChange = (e) => {\r\n      // Only auto-switch if user hasn't manually set a preference\r\n      const savedTheme = localStorage.getItem('theme');\r\n      if (!savedTheme) {\r\n        setIsDarkMode(e.matches);\r\n      }\r\n    };\r\n\r\n    mediaQuery.addEventListener('change', handleChange);\r\n    \r\n    return () => {\r\n      mediaQuery.removeEventListener('change', handleChange);\r\n    };\r\n  }, []);\r\n\r\n  const value = {\r\n    isDarkMode,\r\n    currentTheme,\r\n    toggleTheme,\r\n    setTheme,\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={value}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use theme context\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport default ThemeContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}